//---------------------------------------------------------------------------------------------------------------------
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}
//---------------------------------------------------------------------------------------------------------------------
repositories {
    mavenCentral()
}
//---------------------------------------------------------------------------------------------------------------------
import groovy.json.JsonSlurper
//---------------------------------------------------------------------------------------------------------------------
final WEBSITE_BASEURL = '/test-angular-compiler'
//---------------------------------------------------------------------------------------------------------------------
class DockerHelper {
    private static final def CGROUP_PATTERN = /(?m)^\d+:[\w,?]+:(?:\/[\w.]+)?(?:\/docker[-\/])(\/?(?:docker\/)?(\p{XDigit}{12,}))+(?:\.scope)?$/
    private static final def mSelfContainerIDLock = new Object()
    private static String mSelfContainerID = null

    static getSelfContainerID() {
        synchronized (mSelfContainerIDLock) {
            if (mSelfContainerID == null) {
                try {
                    mSelfContainerID = (new File('/proc/self/cgroup').getText('UTF-8') =~ CGROUP_PATTERN)[0][2]
                } catch (ignored) {
                    mSelfContainerID = ''
                }
            }
        }
        mSelfContainerID != '' ? mSelfContainerID : null
    }

    static inspectContainer(imageID) {
        try {
            new JsonSlurper().parseText(['docker', 'container', 'inspect', imageID].execute().text.trim())[0]
        } catch (ignored) {
            null
        }
    }

    static getHostPath(final File localFile) {
        String mountPoint = null
        String destination = "/"
        inspectContainer(selfContainerID)?.Mounts?.each {
            if (
                //(it.Driver == null || it.Driver == 'local') &&
                it.Destination.startsWith(destination) &&
                localFile.absolutePath.startsWith("$it.Destination/")
            ) {
                mountPoint = it.Source
                destination = "$it.Destination/"
            }
        }
        mountPoint ? "$mountPoint/${localFile.absolutePath.substring(destination.length())}" : localFile.absolutePath
    }
}
//---------------------------------------------------------------------------------------------------------------------
task installAngularNpmModules(type: Exec) {
    group 'angular'
    inputs.file "$projectDir/angular/package.json"
    outputs.upToDateWhen { file("$projectDir/angular/node_modules/").isDirectory() }
    workingDir "$projectDir/angular"
    commandLine 'yarn', 'install'
}
//---------------------------------------------------------------------------------------------------------------------
task compileAngular(type: Exec) {
    group 'angular'
    dependsOn installAngularNpmModules
    inputs.dir "$projectDir/angular/packages/"
    inputs.dir "$projectDir/angular/tools/"
    outputs.dir "$projectDir/angular/dist/packages/"
    outputs.dir "$projectDir/angular/dist/tools/"
    workingDir "$projectDir/angular"
    commandLine './build.sh'
}
//---------------------------------------------------------------------------------------------------------------------
task installNodeModules(type: Exec) {
    group 'node'
    inputs.file "$projectDir/package.json"
    outputs.upToDateWhen { file("$projectDir/node_modules/").isDirectory() }
    commandLine 'yarn', 'install'
}
//---------------------------------------------------------------------------------------------------------------------
task compileTool(type: Exec) {
    group 'tool'
    dependsOn installNodeModules
    inputs.dir "$projectDir/tool/"
    outputs.dir "$buildDir/tool/"
    workingDir "$projectDir/tool"
    commandLine "$projectDir/node_modules/.bin/tsc"
}
//---------------------------------------------------------------------------------------------------------------------
task runTool(type: Exec) {
    group 'tool'
    dependsOn compileTool
    workingDir "$projectDir/src"
    commandLine 'node', '../build/tool/main.js'
}
//---------------------------------------------------------------------------------------------------------------------
task webpackAsES2015UsingAngular(type: Exec) {
    group 'webpackAsES2015'
    dependsOn installNodeModules
    def webpackConfigJson = "$projectDir/src/webpack.config.webpackAsES2015.angular.js"
    def tsconfigJson = "$projectDir/src/tsconfig.webpackAsES2015.angular.json"
    def entryTs = "$projectDir/src/main/main.platformBrowser.ts"
    def outputDir = "$buildDir/webpackAsES2015.angular"
    inputs.file webpackConfigJson
    inputs.file tsconfigJson
    inputs.dir "$projectDir/src/main/"
    inputs.dir "$projectDir/src/app/"
    inputs.dir "$projectDir/src/template/"
    inputs.dir "$projectDir/src/tools/"
    outputs.dir outputDir

    doFirst {
        delete outputDir
    }

    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/webpack", '--config', webpackConfigJson, '--output-path', outputDir, "bundle=$entryTs"
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithWebpackAsES2015UsingAngular {
    group 'webpackAsES2015'
    def outputSubdir = 'webpackAsES2015.angular'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/webpackAsES2015.docker.angular"
    def dockerImageName = 'buildtool/test-angular-compiler.webpack-as-es2015.angular'
    def dockerContainerName = 'test-angular-compiler.webpack-as-es2015.angular'
    def dockerPublishedPort = 20080
    inputs.files webpackAsES2015UsingAngular.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            from "$buildDir/$outputSubdir/index.html"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task webpackAsES2015UsingTypescript(type: Exec) {
    group 'webpackAsES2015'
    dependsOn installNodeModules
    def webpackConfigJson = "$projectDir/src/webpack.config.webpackAsES2015.typescript.js"
    def tsconfigJson = "$projectDir/src/tsconfig.webpackAsES2015.typescript.json"
    def entryTs = "$projectDir/src/main/main.platformBrowserDynamic.ts"
    def outputDir = "$buildDir/webpackAsES2015.typescript"
    inputs.file webpackConfigJson
    inputs.file tsconfigJson
    inputs.dir "$projectDir/src/main/"
    inputs.dir "$projectDir/src/app/"
    inputs.dir "$projectDir/src/template/"
    inputs.dir "$projectDir/src/tools/"
    outputs.dir outputDir

    doFirst {
        delete outputDir
    }

    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/webpack", '--config', webpackConfigJson, '--output-path', outputDir, "bundle=$entryTs"
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithWebpackAsES2015UsingTypescript {
    group 'webpackAsES2015'
    def outputSubdir = 'webpackAsES2015.typescript'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/webpackAsES2015.docker.typescript"
    def dockerImageName = 'buildtool/test-angular-compiler.webpack-as-es2015.typescript'
    def dockerContainerName = 'test-angular-compiler.webpack-as-es2015.typescript'
    def dockerPublishedPort = 21080
    inputs.files webpackAsES2015UsingTypescript.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            from "$buildDir/$outputSubdir/index.html"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task compileNgcAsES2015(type: Exec) {
    group 'ngcAsES2015'
    dependsOn installNodeModules
    def tsconfigJson = "$projectDir/src/tsconfig.ngcAsES2015.json"
    def outputDir = "$buildDir/ngcAsES2015.ngc"
    inputs.file tsconfigJson
    inputs.dir "$projectDir/src/main/"
    inputs.dir "$projectDir/src/app/"
    inputs.dir "$projectDir/src/template/"
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/ngc", '--project', tsconfigJson, '--outDir', outputDir
}
//---------------------------------------------------------------------------------------------------------------------
task webpackNgcAsES2015(type: Exec) {
    group 'ngcAsES2015'
    def webpackConfigJson = "$projectDir/src/webpack.config.ngcAsES2015.js"
    def entryJs = "$projectDir/build/ngcAsES2015.ngc/src/main/main.platformBrowser.js"
    def outputDir = "$buildDir/ngcAsES2015.webpack"
    inputs.files compileNgcAsES2015.outputs
    inputs.file webpackConfigJson
    inputs.dir "$projectDir/src/tools/"
    outputs.dir outputDir

    doFirst {
        delete outputDir
    }

    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/webpack", '--config', webpackConfigJson, '--output-path', outputDir, "bundle=$entryJs"
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithWebpackNgcAsES2015 {
    group 'ngcAsES2015'
    def outputSubdir = 'ngcAsES2015.webpack'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/ngcAsES2015.docker.webpack"
    def dockerImageName = 'buildtool/test-angular-compiler.ngc-as-es2015.webpack'
    def dockerContainerName = 'test-angular-compiler.ngc-as-es2015.webpack'
    def dockerPublishedPort = 22080
    inputs.files webpackNgcAsES2015.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            from "$buildDir/$outputSubdir/index.html"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task rollupNgcAsES2015(type: Exec) {
    group 'ngcAsES2015'
    def rollupConfigJson = "$projectDir/src/rollup-config.ngcAsES2015.js"
    def entryJs = "$projectDir/build/ngcAsES2015.ngc/src/main/main.platformBrowser.js"
    def outputDir = "$buildDir/ngcAsES2015.rollup"
    def outputJs = "$outputDir/bundle.js"
    inputs.files compileNgcAsES2015.outputs
    inputs.file rollupConfigJson
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/rollup", '-c', rollupConfigJson, '-i', entryJs, '-o', outputJs
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithRollupNgcAsES2015 {
    group 'ngcAsES2015'
    def outputSubdir = 'ngcAsES2015.rollup'
    def indexHtml = 'index.ngcAsES2015.rollup.html'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/ngcAsES2015.docker.rollup"
    def dockerImageName = 'buildtool/test-angular-compiler.ngc-as-es2015.rollup'
    def dockerContainerName = 'test-angular-compiler.ngc-as-es2015.rollup'
    def dockerPublishedPort = 23080
    inputs.files rollupNgcAsES2015.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
            rename indexHtml, 'index.html'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task compileNgcAsCommonJS(type: Exec) {
    group 'ngcAsCommonJS'
    dependsOn installNodeModules
    def tsconfigJson = "$projectDir/src/tsconfig.ngcAsCommonJS.json"
    def outputDir = "$buildDir/ngcAsCommonJS.ngc"
    inputs.file tsconfigJson
    inputs.dir "$projectDir/src/main/"
    inputs.dir "$projectDir/src/app/"
    inputs.dir "$projectDir/src/template/"
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/ngc", '--project', tsconfigJson, '--outDir', outputDir
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithNgcAsCommonJS {
    group 'ngcAsCommonJS'
    def outputSubdir = 'ngcAsCommonJS.ngc'
    def dockerfile = 'Dockerfile.ngcAsCommonJS.ngc'
    def dockerImageName = 'buildtool/test-angular-compiler.ngc-as-commonjs.ngc'
    def dockerContainerName = 'test-angular-compiler.ngc-as-commonjs.ngc'
    def dockerPublishedPort = 24080
    inputs.files compileNgcAsCommonJS.outputs

    doLast {
        exec {
            workingDir "$projectDir/src"
            commandLine 'docker', 'build', '--file', dockerfile, '--tag', dockerImageName, '.'
        }

        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        def projectHostDir = DockerHelper.getHostPath projectDir
        def buildHostDir = DockerHelper.getHostPath buildDir
        def nginxContainerDir = '/usr/share/nginx'
        def htmlContainerDir = "$nginxContainerDir/html"

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--volume', "$projectHostDir/node_modules:$htmlContainerDir/node_modules",
            '--volume', "$buildHostDir/$outputSubdir:$htmlContainerDir/build/$outputSubdir",
            '--volume', "$projectHostDir/src:$htmlContainerDir/src",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task webpackNgcAsCommonJS(type: Exec) {
    group 'ngcAsCommonJS'
    def webpackConfigJson = "$projectDir/src/webpack.config.ngcAsCommonJS.js"
    def entryJs = "$projectDir/build/ngcAsCommonJS.ngc/src/main/main.platformBrowser.js"
    def outputDir = "$buildDir/ngcAsCommonJS.webpack"
    inputs.files compileNgcAsCommonJS.outputs
    inputs.file webpackConfigJson
    inputs.dir "$projectDir/src/tools/"
    outputs.dir outputDir

    doFirst {
        delete outputDir
    }

    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/webpack", '--config', webpackConfigJson, '--output-path', outputDir, "bundle=$entryJs"
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithWebpackNgcAsCommonJS {
    group 'ngcAsCommonJS'
    def outputSubdir = 'ngcAsCommonJS.webpack'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/ngcAsCommonJS.docker.webpack"
    def dockerImageName = 'buildtool/test-angular-compiler.ngc-as-commonjs.webpack'
    def dockerContainerName = 'test-angular-compiler.ngc-as-commonjs.webpack'
    def dockerPublishedPort = 25080
    inputs.files webpackNgcAsCommonJS.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            from "$buildDir/$outputSubdir/index.html"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task rollupNgcAsCommonJS(type: Exec) {
    group 'ngcAsCommonJS'
    def rollupConfigJson = "$projectDir/src/rollup-config.ngcAsCommonJS.js"
    def entryJs = "$projectDir/build/ngcAsCommonJS.ngc/src/main/main.platformBrowser.js"
    def outputDir = "$buildDir/ngcAsCommonJS.rollup"
    def outputJs = "$outputDir/bundle.js"
    inputs.files compileNgcAsCommonJS.outputs
    inputs.file rollupConfigJson
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/rollup", '-c', rollupConfigJson, '-i', entryJs, '-o', outputJs
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithRollupNgcAsCommonJS {
    group 'ngcAsCommonJS'
    def outputSubdir = 'ngcAsCommonJS.rollup'
    def indexHtml = 'index.ngcAsCommonJS.rollup.html'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/ngcAsCommonJS.docker.rollup"
    def dockerImageName = 'buildtool/test-angular-compiler.ngc-as-commonjs.rollup'
    def dockerContainerName = 'test-angular-compiler.ngc-as-commonjs.rollup'
    def dockerPublishedPort = 26080
    inputs.files rollupNgcAsCommonJS.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
            rename indexHtml, 'index.html'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task compileTscAsES2015(type: Exec) {
    group 'tscAsES2015'
    dependsOn installNodeModules
    def tsconfigJson = "$projectDir/src/tsconfig.tscAsES2015.json"
    def outputDir = "$buildDir/tscAsES2015.tsc"
    inputs.file tsconfigJson
    inputs.dir "$projectDir/src/main/"
    inputs.dir "$projectDir/src/app/"
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/tsc", '--project', tsconfigJson, '--outDir', outputDir
}
//---------------------------------------------------------------------------------------------------------------------
task webpackTscAsES2015(type: Exec) {
    group 'tscAsES2015'
    def webpackConfigJson = "$projectDir/src/webpack.config.tscAsES2015.js"
    def entryJs = "$projectDir/build/tscAsES2015.tsc/main/main.platformBrowserDynamic.js"
    def outputDir = "$buildDir/tscAsES2015.webpack"
    inputs.files compileTscAsES2015.outputs
    inputs.file webpackConfigJson
    inputs.dir "$projectDir/src/template/"
    inputs.dir "$projectDir/src/tools/"
    outputs.dir outputDir

    doFirst {
        delete outputDir
    }

    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/webpack", '--config', webpackConfigJson, '--output-path', outputDir, "bundle=$entryJs"
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithWebpackTscAsES2015 {
    group 'tscAsES2015'
    def outputSubdir = 'tscAsES2015.webpack'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/tscAsES2015.docker.webpack"
    def dockerImageName = 'buildtool/test-angular-compiler.tsc-as-es2015.webpack'
    def dockerContainerName = 'test-angular-compiler.tsc-as-es2015.webpack'
    def dockerPublishedPort = 27080
    inputs.files webpackTscAsES2015.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            from "$buildDir/$outputSubdir/index.html"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task compileTscAsCommonJS(type: Exec) {
    group 'tscAsCommonJS'
    dependsOn installNodeModules
    def tsconfigJson = "$projectDir/src/tsconfig.tscAsCommonJS.json"
    def outputDir = "$buildDir/tscAsCommonJS.tsc"
    inputs.file tsconfigJson
    inputs.dir "$projectDir/src/main/"
    inputs.dir "$projectDir/src/app/"
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/tsc", '--project', tsconfigJson, '--outDir', outputDir
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithTscAsCommonJS {
    group 'tscAsCommonJS'
    def outputSubdir = 'tscAsCommonJS.tsc'
    def dockerfile = 'Dockerfile.tscAsCommonJS.tsc'
    def dockerImageName = 'buildtool/test-angular-compiler.tsc-as-commonjs.tsc'
    def dockerContainerName = 'test-angular-compiler.tsc-as-commonjs.tsc'
    def dockerPublishedPort = 28080
    inputs.files compileTscAsCommonJS.outputs

    doLast {
        exec {
            workingDir "$projectDir/src"
            commandLine 'docker', 'build', '--file', dockerfile, '--tag', dockerImageName, '.'
        }

        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        def projectHostDir = DockerHelper.getHostPath projectDir
        def buildHostDir = DockerHelper.getHostPath buildDir
        def nginxContainerDir = '/usr/share/nginx'
        def htmlContainerDir = "$nginxContainerDir/html"

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--volume', "$projectHostDir/node_modules:$htmlContainerDir/node_modules",
            '--volume', "$buildHostDir/$outputSubdir:$htmlContainerDir/build/$outputSubdir",
            '--volume', "$projectHostDir/src:$htmlContainerDir/src",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task webpackTscAsCommonJS(type: Exec) {
    group 'tscAsCommonJS'
    def webpackConfigJson = "$projectDir/src/webpack.config.tscAsCommonJS.js"
    def entryJs = "$projectDir/build/tscAsCommonJS.tsc/main/main.platformBrowserDynamic.js"
    def outputDir = "$buildDir/tscAsCommonJS.webpack"
    inputs.files compileTscAsCommonJS.outputs
    inputs.file webpackConfigJson
    inputs.dir "$projectDir/src/template/"
    inputs.dir "$projectDir/src/tools/"
    outputs.dir outputDir

    doFirst {
        delete outputDir
    }

    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/webpack", '--config', webpackConfigJson, '--output-path', outputDir, "bundle=$entryJs"
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithWebpackTscAsCommonJS {
    group 'tscAsCommonJS'
    def outputSubdir = 'tscAsCommonJS.webpack'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/tscAsCommonJS.docker.webpack"
    def dockerImageName = 'buildtool/test-angular-compiler.tsc-as-commonjs.webpack'
    def dockerContainerName = 'test-angular-compiler.tsc-as-commonjs.webpack'
    def dockerPublishedPort = 29080
    inputs.files webpackTscAsCommonJS.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            from "$buildDir/$outputSubdir/index.html"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task rollupTscAsCommonJS(type: Exec) {
    group 'tscAsCommonJS'
    def rollupConfigJson = "$projectDir/src/rollup-config.tscAsCommonJS.js"
    def entryJs = "$projectDir/build/tscAsCommonJS.tsc/main/main.platformBrowserDynamic.js"
    def outputDir = "$buildDir/tscAsCommonJS.rollup"
    def outputJs = "$outputDir/bundle.js"
    inputs.files compileTscAsCommonJS.outputs
    inputs.file rollupConfigJson
    inputs.dir "$projectDir/src/template/"
    outputs.dir outputDir
    workingDir "$projectDir/src"
    commandLine "$projectDir/node_modules/.bin/rollup", '-c', rollupConfigJson, '-i', entryJs, '-o', outputJs
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithRollupTscAsCommonJS {
    group 'tscAsCommonJS'
    def outputSubdir = 'tscAsCommonJS.rollup'
    def indexHtml = 'index.tscAsCommonJS.rollup.html'
    def dockerfile = 'Dockerfile.bundle'
    def dockerBuildDir = "$buildDir/tscAsCommonJS.docker.rollup"
    def dockerImageName = 'buildtool/test-angular-compiler.tsc-as-commonjs.rollup'
    def dockerContainerName = 'test-angular-compiler.tsc-as-commonjs.rollup'
    def dockerPublishedPort = 30080
    inputs.files rollupTscAsCommonJS.outputs

    doLast {
        copy {
            from "$projectDir/src/"
            into "$dockerBuildDir/"
            include 'html/**'
            include 'nginx/**'
            include dockerfile
            rename dockerfile, 'Dockerfile'
            rename indexHtml, 'index.html'
        }

        copy {
            from "$projectDir/node_modules/core-js/client/shim.min.js"
            from "$projectDir/node_modules/zone.js/dist/zone.min.js"
            from "$projectDir/node_modules/moment/min/moment.min.js"
            into "$dockerBuildDir/html/"
        }

        copy {
            from "$projectDir/node_modules/bootstrap/dist/"
            into "$dockerBuildDir/html/bootstrap/"
        }

        copy {
            from "$buildDir/$outputSubdir/"
            into "$dockerBuildDir/html/build/$outputSubdir/"
        }

        exec { commandLine 'docker', 'build', '--tag', dockerImageName, dockerBuildDir }
        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
task runWebsiteWithTranspile {
    group 'transpile'
    def dockerfile = 'Dockerfile.transpile'
    def dockerImageName = 'buildtool/test-angular-compiler.transpile'
    def dockerContainerName = 'test-angular-compiler.transpile'
    def dockerPublishedPort = 31080

    doLast {
        exec {
            workingDir "$projectDir/src"
            commandLine 'docker', 'build', '--file', dockerfile, '--tag', dockerImageName, '.'
        }

        ['docker', 'stop', dockerContainerName].execute().waitFor()
        ['docker', 'rm', dockerContainerName].execute().waitFor()

        def projectHostDir = DockerHelper.getHostPath projectDir
        def nginxContainerDir = '/usr/share/nginx'
        def htmlContainerDir = "$nginxContainerDir/html"

        exec { commandLine 'docker', 'run', '--detach',
            '--name', dockerContainerName,
            '--publish', "$dockerPublishedPort:80",
            '--volume', "$projectHostDir/node_modules:$htmlContainerDir/node_modules",
            '--volume', "$projectHostDir/src:$htmlContainerDir/src",
            '--env', "WEBSITE_BASEURL=$WEBSITE_BASEURL",
            dockerImageName
        }
    }
}
//---------------------------------------------------------------------------------------------------------------------
